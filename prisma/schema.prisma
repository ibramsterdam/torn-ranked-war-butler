// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id   Int     @id
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  apiKey ApiKey?

  faction   Faction? @relation(fields: [factionId], references: [id])
  factionId Int?
}

model DiscordServer {
  id BigInt @id @unique

  isWhitelisted Boolean  @default(false)
  factionAmount Int      @default(1)
  apiKeyAmount  Int      @default(1)
  apiKey        ApiKey[]

  factions FactionsOnDiscordServer[]
}

model ApiKey {
  id          Int    @id @default(autoincrement())
  value       String @unique
  accessLevel String @default("Public")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordServer   DiscordServer @relation(fields: [discordServerId], references: [id])
  discordServerId BigInt
}

model DiscordCategory {
  id             BigInt           @id
  name           String
  discordChannel DiscordChannel[]
}

model DiscordChannel {
  id                BigInt          @id
  name              String
  discordCategory   DiscordCategory @relation(fields: [discordCategoryId], references: [id])
  discordCategoryId BigInt
}

model Faction {
  id      Int    @id @default(autoincrement())
  tornId  Int    @unique
  name    String
  members User[]

  discordServers FactionsOnDiscordServer[]
}

model FactionsOnDiscordServer {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordServer   DiscordServer @relation(fields: [discordServerId], references: [id])
  discordServerId BigInt
  faction         Faction?      @relation(fields: [factionId], references: [id])
  factionId       Int

  @@id([factionId, discordServerId])
}
