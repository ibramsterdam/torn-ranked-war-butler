generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id
  name                String?
  factionId           Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastActionRelative  String?
  lastActionStatus    String?
  lastActionTimestamp BigInt?
  statusDescription   String?
  statusDetails       String?
  statusState         String?
  statusUntil         BigInt?
  retalliationUntil   DateTime?
  attackLink          String?
  profileLink         String?
  age                 Int?
  energydrinkTaken    Int?
  networth            BigInt?
  xanaxTaken          Int?
  energyRefills       Int?
  revivable           Int?
  defense             BigInt?
  dexterity           BigInt?
  ffBonus             Decimal?
  speed               BigInt?
  spyReportDate       DateTime?
  statTotal           BigInt?
  strength            BigInt?
  apiKey              ApiKey?
  faction             Faction?  @relation(fields: [factionId], references: [id])
}

model DiscordServer {
  id              BigInt                    @id @unique
  name            String
  isWhitelisted   Boolean                   @default(false)
  factionAmount   Int                       @default(1)
  apiKeyAmount    Int                       @default(1)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  apiKeys         ApiKey[]
  discordCategory DiscordCategory?
  discordChannel  DiscordChannel[]
  factions        FactionsOnDiscordServer[]
}

model ApiKey {
  id              Int           @id @default(autoincrement())
  value           String        @unique
  accessLevel     String        @default("Public")
  userId          Int           @unique
  discordServerId BigInt
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  brainSurgeonKey Boolean       @default(false)
  discordServer   DiscordServer @relation(fields: [discordServerId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])
}

model DiscordCategory {
  id              BigInt           @id
  name            String
  discordServerId BigInt           @unique
  discordServer   DiscordServer    @relation(fields: [discordServerId], references: [id], onDelete: Cascade)
  discordChannel  DiscordChannel[]
}

model DiscordChannel {
  id                      BigInt                   @id
  name                    String
  discordCategoryId       BigInt
  discordServerId         BigInt
  factionId               Int?
  discordCategory         DiscordCategory          @relation(fields: [discordCategoryId], references: [id])
  DiscordServer           DiscordServer            @relation(fields: [discordServerId], references: [id], onDelete: Cascade)
  faction                 Faction?                 @relation(fields: [factionId], references: [id])
  factionsOnDiscordServer FactionsOnDiscordServer?
}

model Faction {
  id             Int                       @id
  name           String
  DiscordChannel DiscordChannel[]
  discordServers FactionsOnDiscordServer[]
  members        User[]
}

model FactionsOnDiscordServer {
  discordServerId  BigInt
  factionId        Int
  discordChannelId BigInt         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  discordChannel   DiscordChannel @relation(fields: [discordChannelId], references: [id])
  discordServer    DiscordServer  @relation(fields: [discordServerId], references: [id], onDelete: Cascade)
  faction          Faction        @relation(fields: [factionId], references: [id])

  @@id([factionId, discordServerId])
}
